package internal

import (
	"testing"
)

func TestIsValidSid(t *testing.T) {
	file := map[string]Field{
		"AC": {}, "CA": {}, "SM": {}, "PN": {}, "CF": {}, "RE": {},
		"QU": {}, "AP": {}, "TK": {}, "WS": {}, "WW": {}, "WK": {},
		"WT": {}, "RM": {}, "PA": {}, "CH": {}, "US": {}, "IS": {},
		"ET": {},
	}

	// ---------------------------
	// Positive test cases (safe fake SIDs)
	// ---------------------------
	tests := map[string][]string{
		"accounts":      {"AC11111111111111111111111111111111", "AC22222222222222222222222222222222", "AC33333333333333333333333333333333"},
		"calls":         {"CA11111111111111111111111111111111", "CA22222222222222222222222222222222", "CA33333333333333333333333333333333"},
		"messages":      {"SM11111111111111111111111111111111", "SM22222222222222222222222222222222", "SM33333333333333333333333333333333"},
		"phone_numbers": {"PN11111111111111111111111111111111", "PN22222222222222222222222222222222", "PN33333333333333333333333333333333"},
		"conferences":   {"CF11111111111111111111111111111111", "CF22222222222222222222222222222222", "CF33333333333333333333333333333333"},
		"recordings":    {"RE11111111111111111111111111111111", "RE22222222222222222222222222222222", "RE33333333333333333333333333333333"},
		"queues":        {"QU11111111111111111111111111111111", "QU22222222222222222222222222222222", "QU33333333333333333333333333333333"},
		"applications":  {"AP11111111111111111111111111111111", "AP22222222222222222222222222222222", "AP33333333333333333333333333333333"},
		"trunks":        {"TK11111111111111111111111111111111", "TK22222222222222222222222222222222", "TK33333333333333333333333333333333"},
		"workspaces":    {"WS11111111111111111111111111111111", "WS22222222222222222222222222222222", "WS33333333333333333333333333333333"},
		"workflows":     {"WW11111111111111111111111111111111", "WW22222222222222222222222222222222", "WW33333333333333333333333333333333"},
		"workers":       {"WK11111111111111111111111111111111", "WK22222222222222222222222222222222", "WK33333333333333333333333333333333"},
		"tasks":         {"WT11111111111111111111111111111111", "WT22222222222222222222222222222222", "WT33333333333333333333333333333333"},
		"rooms":         {"RM11111111111111111111111111111111", "RM22222222222222222222222222222222", "RM33333333333333333333333333333333"},
		"participants":  {"PA11111111111111111111111111111111", "PA22222222222222222222222222222222", "PA33333333333333333333333333333333"},
		"conversations": {"CH11111111111111111111111111111111", "CH22222222222222222222222222222222", "CH33333333333333333333333333333333"},
		"users":         {"US11111111111111111111111111111111", "US22222222222222222222222222222222", "US33333333333333333333333333333333"},
		"services":      {"IS11111111111111111111111111111111", "IS22222222222222222222222222222222", "IS33333333333333333333333333333333"},
		"documents":     {"ET11111111111111111111111111111111", "ET22222222222222222222222222222222", "ET33333333333333333333333333333333"},
	}

	for category, sids := range tests {
		for _, sid := range sids {
			valid, err := IsValidSid(sid, file)
			if !valid || err != nil {
				t.Errorf("Expected valid SID for category %s: %s, got err=%v", category, sid, err)
			}
		}
	}

	// ---------------------------
	// Negative test cases
	// ---------------------------
	invalidSids := []string{
		"ZZ11111111111111111111111111111111",   // invalid prefix
		"AC111",                                // too short
		"AC1111111111111111111111111111111111", // too long
		"AC1111111111111111111111111111111G",   // invalid hex char "G"
		"",                                     // empty string
		"A",                                    // single char
	}

	for _, sid := range invalidSids {
		valid, err := IsValidSid(sid, file)
		if valid || err == nil {
			t.Errorf("Expected invalid SID: %s, but got valid", sid)
		}
	}
}
